}
}
} else if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("(-1)$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- strsplit(gene_to_find, "-")[[1]][1]
for (line in seq_along(HGNC$Approved.symbol)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Approved.symbol[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
}
if (line != length(HGNC$Approved.symbol)) {
line
} else {
NA
}
}
stopCluster(cl)
if (sum(is.na(l)) != length(l)) {
matched[i] <- HGNC$NCBI.Gene.ID[l]
}
i <- which(is.na(matched))
if (length(i)==0){
aliases=checkout(i)
return(aliases)
}
message(paste(length(i), " symbols remaining (after adaptative parsing on approved symbol)
", sep = ""))
# match to second column: previous symbols (1 elements in column)
matched[i] <- HGNC$NCBI.Gene.ID[match(tolower(genes[i]), tolower(HGNC$Previous.symbols))]
# element not found
message(paste("matching ", length(i), " symbols to HGNC previous symbol
", sep = ""))
i2 <- which(is.na(matched))
if (length(i2)==0){
aliases=checkout(i2)
return(aliases)
}
message(paste(length(i2), " symbols remaining
", sep = ""))
# match to second column: previous symbols (2+ elements in column)
cl <- makeCluster(c)
registerDoParallel(cl)
g <- NULL
l <- 0
l <- foreach(g = seq_along(i2), .combine = cbind) %dopar% {
# for each element not found get corresponding gene
gene_to_find <- tolower(genes[i2[g]])
# check if element not found is present in symbols of columns 2 of HGNC
for (line in seq_along(HGNC$Previous.symbols)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Previous.symbols[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
# get corresponding line or NA and store in l
if (line == length(HGNC$Previous.symbols)) {
if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("-[0-9].*$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- gsub("-", "", gene_to_find)
for (line in seq_along(HGNC$Previous.symbols)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Previous.symbols[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
} else if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("(-1)$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- strsplit(gene_to_find, "-")[[1]][1]
for (line in seq_along(HGNC$Previous.symbols)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Previous.symbols[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
}
}
if (line != length(HGNC$Previous.symbols)) {
line
} else {
NA
}
}
stopCluster(cl)
if (sum(is.na(l)) != length(l)) {
matched[i2] <- HGNC$NCBI.Gene.ID[l]
}
# elements not found
j <- which(is.na(matched))
if (length(j)==0){
aliases=checkout(j)
return(aliases)
}
message(paste(length(j), " symbols remaining (after adaptative parsing on previous symbol)
", sep = ""))
# match to third column: Synonyms (1 elements in column)
matched[j] <- HGNC$NCBI.Gene.ID[match(tolower(genes[j]), tolower(HGNC$Synonyms))]
# elements not found:
j2 <- which(is.na(matched))
if (length(j2)==0){
aliases=checkout(j2)
return(aliases)
}
message(paste("matching ", length(j), " symbols to HGNC synonyms
", sep = ""))
message(paste(length(j2), " symbols remaining
", sep = ""))
# match to third column: Synonyms (2+ elements in column)
cl <- makeCluster(c)
registerDoParallel(cl)
g <- NULL
l <- 0
# same as above parse each line (3rd column) look for correspondance
l <- foreach(g = seq_along(j2), .combine = cbind) %dopar% {
# for each element not found get corresponding gene
gene_to_find <- tolower(genes[j2[g]])
# check if element not found is present in symbols of columns 2 of HGNC
for (line in seq_along(HGNC$Synonyms)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Synonyms[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
# get corresponding line or NA and store in l
if (line == length(HGNC$Synonyms)) {
if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("-[0-9].*$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- gsub("-", "", gene_to_find)
for (line in seq_along(HGNC$Synonyms)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Synonyms[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
} else if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("(-1)$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- strsplit(gene_to_find, "-")[[1]][1]
for (line in seq_along(HGNC$Synonyms)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Synonyms[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
}
}
if (line != length(HGNC$Synonyms)) {
line
} else {
NA
}
}
stopCluster(cl)
if (sum(is.na(l)) != length(l)) {
matched[j2] <- HGNC$NCBI.Gene.ID[l]
}
# elements not found:
k <- which(is.na(matched))
if (length(k)==0){
aliases=checkout(k)
return(aliases)
}
message(paste(length(k), " symbols remaining (after adaptative parsing on synonyms)
", sep = ""))
# other.
symbols <- genes[which(is.na(matched))]
other_ids <- mapIds(org.Hs.eg.db, symbols, "ENTREZID", "SYMBOL")
if (sum(!(names(other_ids) == symbols)) != 0) {
warning("correspondance error")
}
message("calling org.Hs.eg.db on remaining symbols\n")
matched[k] <- as.numeric(other_ids)
m <- which(is.na(matched))
if (length(m)==0){
aliases=checkout(m)
return(aliases)
}
message(paste(length(m), " symbols remaining
", sep = ""))
symbols <- genes[which(is.na(matched))]
message("checking ~withdrawn gene symbols\n")
with <- match(tolower(paste(symbols, "~withdrawn", sep = "")), tolower(HGNC$Approved.symbol))
m1 <- m[-which(!is.na(with))]
with <- with[!is.na(with)]
message(paste(length(with), " symbols withdrawn from databases
", sep = ""))
message(as.character(HGNC$Approved.symbol[with]))
message(paste(round(length(m1) / length(genes), 5), " of genes were not found:\n", sep = ""))
warning(as.character(genes[m1]))
aliases <- data.frame(Symbols = genes, entrezID = as.numeric(matched))
return(aliases)
}
convert_symbols(rownames(gset),HGNC,c=28)
#' @export
#' @import doParallel
#' @import parallel
#' @import foreach
#' @import limma
#' @import utils
#' @import org.Hs.eg.db
#' @importFrom  AnnotationDbi mapIds
#'
#' @title Converts gene symbols to entrez ID
#' @description
#' This function is used to convert gene symbols, previous symbols or aliases to gene entrez ID
#' @name convert_symbols
#' @usage
#' convert_symbols(gset,HGNC,c=2)
#' @param gset gene matrix from which rownames (gene symbols) are extracted
#' @param HGNC HGNC correspondance file.
#' @param c number of cores to use
#' @examples
#' file <- system.file("extdata", "HGNC.txt", package = "aliases2entrez")
#' HGNC <- read.delim(file)
#' # ids=convert_symbols(gset,HGNC,c=2)
#' @return returns a vector containing IDs if match was found or NA if unknown or withdrawn symbol
#'
convert_symbols <- function(symbols, HGNC, c = 2) {
genes=symbols
message("calling limma::alias2Symbol on provided data
")
genes <- ifelse(is.na(alias2SymbolTable(genes)), genes, alias2SymbolTable(genes))
message(paste("matching ", dim(genes)[1], " symbols to HGNC Approved symbol
", sep = ""))
matched <- HGNC$NCBI.Gene.ID[match(tolower(genes), tolower(HGNC$Approved.symbol))]
# loc 2 entrezid
id <- which(is.na(matched))
if (length(id)==0){
aliases=checkout(id)
return(aliases)
}
missing_ids <- genes[id]
message(paste(length(id), " symbols failed to be identified
", sep = ""))
message("looking for ^LOC symbols
")
id2 <- grep("^LOC", missing_ids, perl = TRUE)
message(paste(length(id2), " symbols were found
", sep = ""))
matched[id][id2] <- as.numeric(gsub("LOC", "", missing_ids[id2]))
# elements not found
i <- which(is.na(matched))
if (length(i)==0){
aliases=checkout(i)
return(aliases)
}
message(paste(length(i), " symbols remaining
", sep = ""))
cl <- makeCluster(c)
registerDoParallel(cl)
g <- NULL
l <- 0
l <- foreach(g = seq_along(i), .combine = cbind) %dopar% {
# for each element not found get corresponding gene
gene_to_find <- tolower(genes[i[g]])
for (line in seq_along(HGNC$Approved.symbol)) {}
if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("-[0-9].*$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- gsub("-", "", gene_to_find)
for (line in seq_along(HGNC$Approved.symbol)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Approved.symbol[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
} else if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("(-1)$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- strsplit(gene_to_find, "-")[[1]][1]
for (line in seq_along(HGNC$Approved.symbol)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Approved.symbol[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
}
if (line != length(HGNC$Approved.symbol)) {
line
} else {
NA
}
}
stopCluster(cl)
if (sum(is.na(l)) != length(l)) {
matched[i] <- HGNC$NCBI.Gene.ID[l]
}
i <- which(is.na(matched))
if (length(i)==0){
aliases=checkout(i)
return(aliases)
}
message(paste(length(i), " symbols remaining (after adaptative parsing on approved symbol)
", sep = ""))
# match to second column: previous symbols (1 elements in column)
matched[i] <- HGNC$NCBI.Gene.ID[match(tolower(genes[i]), tolower(HGNC$Previous.symbols))]
# element not found
message(paste("matching ", length(i), " symbols to HGNC previous symbol
", sep = ""))
i2 <- which(is.na(matched))
if (length(i2)==0){
aliases=checkout(i2)
return(aliases)
}
message(paste(length(i2), " symbols remaining
", sep = ""))
# match to second column: previous symbols (2+ elements in column)
cl <- makeCluster(c)
registerDoParallel(cl)
g <- NULL
l <- 0
l <- foreach(g = seq_along(i2), .combine = cbind) %dopar% {
# for each element not found get corresponding gene
gene_to_find <- tolower(genes[i2[g]])
# check if element not found is present in symbols of columns 2 of HGNC
for (line in seq_along(HGNC$Previous.symbols)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Previous.symbols[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
# get corresponding line or NA and store in l
if (line == length(HGNC$Previous.symbols)) {
if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("-[0-9].*$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- gsub("-", "", gene_to_find)
for (line in seq_along(HGNC$Previous.symbols)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Previous.symbols[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
} else if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("(-1)$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- strsplit(gene_to_find, "-")[[1]][1]
for (line in seq_along(HGNC$Previous.symbols)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Previous.symbols[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
}
}
if (line != length(HGNC$Previous.symbols)) {
line
} else {
NA
}
}
stopCluster(cl)
if (sum(is.na(l)) != length(l)) {
matched[i2] <- HGNC$NCBI.Gene.ID[l]
}
# elements not found
j <- which(is.na(matched))
if (length(j)==0){
aliases=checkout(j)
return(aliases)
}
message(paste(length(j), " symbols remaining (after adaptative parsing on previous symbol)
", sep = ""))
# match to third column: Synonyms (1 elements in column)
matched[j] <- HGNC$NCBI.Gene.ID[match(tolower(genes[j]), tolower(HGNC$Synonyms))]
# elements not found:
j2 <- which(is.na(matched))
if (length(j2)==0){
aliases=checkout(j2)
return(aliases)
}
message(paste("matching ", length(j), " symbols to HGNC synonyms
", sep = ""))
message(paste(length(j2), " symbols remaining
", sep = ""))
# match to third column: Synonyms (2+ elements in column)
cl <- makeCluster(c)
registerDoParallel(cl)
g <- NULL
l <- 0
# same as above parse each line (3rd column) look for correspondance
l <- foreach(g = seq_along(j2), .combine = cbind) %dopar% {
# for each element not found get corresponding gene
gene_to_find <- tolower(genes[j2[g]])
# check if element not found is present in symbols of columns 2 of HGNC
for (line in seq_along(HGNC$Synonyms)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Synonyms[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
# get corresponding line or NA and store in l
if (line == length(HGNC$Synonyms)) {
if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("-[0-9].*$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- gsub("-", "", gene_to_find)
for (line in seq_along(HGNC$Synonyms)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Synonyms[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
} else if (length(grep("-", gene_to_find, perl = TRUE)) > 0 & length(grep("(-1)$", gene_to_find, perl = TRUE)) > 0) {
gene_to_find <- strsplit(gene_to_find, "-")[[1]][1]
for (line in seq_along(HGNC$Synonyms)) {
# split multiple elements
res <- gene_to_find %in% tolower(strsplit(as.character(HGNC$Synonyms[line]), split = ", ")[[1]])
# if found stop
if (res) {
break
}
}
}
}
if (line != length(HGNC$Synonyms)) {
line
} else {
NA
}
}
stopCluster(cl)
if (sum(is.na(l)) != length(l)) {
matched[j2] <- HGNC$NCBI.Gene.ID[l]
}
# elements not found:
k <- which(is.na(matched))
if (length(k)==0){
aliases=checkout(k)
return(aliases)
}
message(paste(length(k), " symbols remaining (after adaptative parsing on synonyms)
", sep = ""))
# other.
symbols <- genes[which(is.na(matched))]
other_ids <- mapIds(org.Hs.eg.db, symbols, "ENTREZID", "SYMBOL")
if (sum(!(names(other_ids) == symbols)) != 0) {
warning("correspondance error")
}
message("calling org.Hs.eg.db on remaining symbols")
matched[k] <- as.numeric(other_ids)
m <- which(is.na(matched))
if (length(m)==0){
aliases=checkout(m)
return(aliases)
}
message(paste(length(m), " symbols remaining
", sep = ""))
symbols <- genes[which(is.na(matched))]
message("checking ~withdrawn gene symbols")
with <- match(tolower(paste(symbols, "~withdrawn", sep = "")), tolower(HGNC$Approved.symbol))
m1 <- m[-which(!is.na(with))]
with <- with[!is.na(with)]
message(paste(length(with), " symbols withdrawn from databases
", sep = ""))
message(as.character(HGNC$Approved.symbol[with]))
message(paste(round(length(m1) / length(genes), 5), " of genes were not found:", sep = ""))
warning(as.character(genes[m1]))
aliases <- data.frame(Symbols = genes, entrezID = as.numeric(matched))
return(aliases)
}
convert_symbols(rownames(gset),HGNC,c=28)
message(cat("qjsdfqjldskfjqdf\n"))
message(cat("qjsdfqjldskfjqdf"))
message("qjsdfqjldskfjqdf")
cat(red("qjsdfqjldskfjqdf"))
library(crayon)
cat(red("qjsdfqjldskfjqdf"))
document()
setwd("/media/Storage_HDD/C3M/R_package/aliases2entrez")
document()
library(aliases2entrez)
library(aliases2entrez)
document()
library(aliases2entrez)
document()
document()
document()
document()
document()
library(doParallel)
# LIBRARIES ---------------------------------------------------------------
setwd("/media/Storage_HDD/C3M/RNAseq/relapse_prediction/Scripts/")
makeCluster(c)
url.exists("https://www.genenames.org/cgi-bin/dwnload/custom?col=gd_app_sym&col=gd_status&col=gd_prev_sym&col=gd_aliases&col=gd_pub_eg_id&status=Approved&status=Entry%20Withdrawn&hgnc_dbtag=on&order_by=gd_app_sym_sort&format=text&submit=submit")
url.exists("https://www.genenames.org/cgi-bin/download/custom?col=gd_app_sym&col=gd_status&col=gd_prev_sym&col=gd_aliases&col=gd_pub_eg_id&status=Approved&status=Entry%20Withdrawn&hgnc_dbtag=on&order_by=gd_app_sym_sort&format=text&submit=submit")
url="https://www.genenames.org/cgi-bin/dwnload/custom?col=gd_app_sym&col=gd_status&col=gd_prev_sym&col=gd_aliases&col=gd_pub_eg_id&status=Approved&status=Entry%20Withdrawn&hgnc_dbtag=on&order_by=gd_app_sym_sort&format=text&submit=submit"
if (url.exists(url)){
HGNC <- read_delim(url,"\t", escape_double = FALSE, trim_ws = TRUE)
HGNC=data.frame(HGNC)
name.and.status=paste(HGNC$Approved.symbol,ifelse(HGNC$Status=="Symbol Withdrawn","~withdrawn",""),sep="")
HGNC$Approved.symbol=name.and.status
HGNC=HGNC[,-c(2)]
return(HGNC)
} else {stop('url not found, please refer to documentation')}
use_mit_license()
use_mit_license("Raphaël Bonnet, Jean-François Peyron")
setwd("/media/Storage_HDD/C3M/R_package/aliases2entrez")
use_mit_license("Raphaël Bonnet, Jean-François Peyron")
